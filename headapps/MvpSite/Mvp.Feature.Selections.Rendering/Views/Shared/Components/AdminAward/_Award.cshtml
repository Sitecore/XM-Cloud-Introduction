@using Mvp.Selections.Domain
@model Mvp.Feature.Selections.Models.Admin.AwardModel

<form method="post">
    <input asp-for="IsConfirmed" value="true" type="hidden" />
    <input asp-for="ApplicationId" type="hidden"/>
    <div class="form-group">
        <label asp-for="MvpTypeId">
            @(Model.IsEditing ? Html.Raw(Model.MvpTypeLabel?.EditableMarkup) : Model.MvpTypeLabel?.Value)
        </label>
        <span class="text-danger">*</span>
        <select asp-for="MvpTypeId" class="form-control" required>
            @foreach (MvpType mvpType in Model.MvpTypes)
            {
                <option value="@mvpType.Id">@mvpType.Name</option>
            }
        </select>
    </div>
    <div class="form-group">
        <label asp-for="Warning">
            @(Model.IsEditing ? Html.Raw(Model.WarningLabel?.EditableMarkup) : Model.WarningLabel?.Value)
        </label>
        <textarea asp-for="Warning" rows="3" class="form-control"></textarea>
    </div>
    @if (Model.IsEditing)
    {
        @Html.Raw(Model.ConfirmAwardLabelFormat?.EditableMarkup)
    }
    else if (Model.ConfirmAwardLabelFormat != null)
    {
        @(string.Format(Model.ConfirmAwardLabelFormat.Value, Model.Application.Applicant.Name, Model.Application.Country.Name, Model.Application.Selection.Year))
    }
    <div class="form-group">
        <a asp-for="ReturnLink" class="btn btn-secondary" role="button">@(Model.IsEditing ? Html.Raw(Model.CancelLabel?.EditableMarkup) : Model.CancelLabel?.Value)</a>
        <button asp-for="ConfirmLabel" type="submit" class="btn btn-primary"></button>
    </div>
</form>